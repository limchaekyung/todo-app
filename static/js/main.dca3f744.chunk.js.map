{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoListItem.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setvalue","onChange","useCallback","e","target","onSubmit","preventDefault","placeholder","type","TodoListItem","todo","onRemove","onToggle","style","id","text","checked","cn","onClick","React","memo","TodoList","todos","rowRenderer","index","key","width","height","rowCount","length","rowHeight","list","outline","createBulkTodos","array","i","push","todoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","current","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dca3f744.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({children}) => {\r\n    return(\r\n        <div className=\"TodoTemplate\">\r\n            <div className=\"app-title\">일정 관리</div>\r\n            <div className=\"content\">{children}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoTemplate;","import React, {useState, useCallback} from 'react';\r\nimport {MdAdd} from 'react-icons/md';\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({onInsert}) => {\r\n    const [value, setvalue] = useState('');\r\n\r\n    const onChange = useCallback(e => {\r\n        setvalue(e.target.value);\r\n    }, []);\r\n\r\n    const onSubmit = useCallback(\r\n        e => {\r\n            onInsert(value);\r\n            setvalue('');   //value 값 초기화\r\n\r\n            //submit 이벤트는 브라우저에서 새로고침을 발생시킨다.\r\n            //이를 방지하기 위해 이 함수를 호출한다.\r\n            e.preventDefault();\r\n        },\r\n        [onInsert, value],\r\n    );\r\n\r\n    return(\r\n        <form className=\"TodoInsert\" onSubmit={onSubmit}>\r\n            <input placeholder=\"할 일을 입력하세요\"\r\n                value={value}\r\n                onChange={onChange}\r\n            />\r\n            <button type=\"submit\">\r\n                <MdAdd/>\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoInsert;","import React from 'react';\r\nimport {\r\n    MdCheckBoxOutlineBlank,\r\n    MdCheckBox,\r\n    MdRemoveCircleOutline,\r\n} from 'react-icons/md';\r\nimport cn from 'classnames';\r\nimport './TodoListItem.scss';\r\n\r\nconst TodoListItem = ({todo, onRemove, onToggle, style}) => {\r\n    const {id, text, checked} = todo;\r\n    return(\r\n        <div className=\"TodoListItem-virtualized\" style={style}>\r\n            <div className=\"TodoListItem\">\r\n                <div className={cn('checkbox', {checked})} onClick={() => onToggle(id)}>\r\n                    {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n                    <div className=\"text\">{text}</div>\r\n                </div>\r\n                <div className=\"remove\" onClick={() => onRemove(id)}>\r\n                    <MdRemoveCircleOutline />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(TodoListItem);","import React, {useCallback} from 'react';\r\nimport {List} from 'react-virtualized';\r\nimport TodoListItem from './TodoListItem';\r\nimport './TodoList.scss';\r\n\r\nconst TodoList = ({todos, onRemove, onToggle}) => {\r\n    const rowRenderer = useCallback(\r\n        ({index, key, style}) => {\r\n            const todo = todos[index];\r\n            return(\r\n                <TodoListItem\r\n                todo={todo}\r\n                key={key}\r\n                onRemove={onRemove}\r\n                onToggle={onToggle}\r\n                style={style}\r\n                />\r\n            );\r\n        },\r\n        [onRemove, onToggle, todos],\r\n    );\r\n\r\n    return(\r\n        <List\r\n        className=\"TodoList\"\r\n        width={512} //전체 크기\r\n        height={513}    //전체 높이\r\n        rowCount={todos.length} //항목 개수\r\n        rowHeight={57}  //항목 높이\r\n        rowRenderer={rowRenderer}   //항목을 렌더링할 때 쓰는 함수\r\n        list={todos}    //배열\r\n        style={{outline: 'none'}}   //List에 기본 적용되는 outline 스타일 제거\r\n        />\r\n    )\r\n}\r\nexport default React.memo(TodoList);","import React, {useReducer, useState, useRef, useCallback} from 'react';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\n\nfunction createBulkTodos(){\n  const array = [];\n  for(let i=1;i<=2500;i++){\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false,\n    });\n  }\n  return array;\n}\n\nfunction todoReducer(todos, action){\n  switch (action.type){\n    case 'INSERT':  //새로 추가\n    //{type: 'INSERT', todo: {id: 1, text: 'todo', checked: false}}\n    return todos.concat(action.todo);\n\n    case 'REMOVE':  //제거\n    //{type: 'REMOVE', id: 1}\n    return todos.filter(todo => todo.id !== action.id);\n\n    case 'TOGGLE':  //토글\n    //{type: 'TOGGLE', id: 1}\n    return todos.map(todo =>\n      todo.id === action.id ? {...todo, checked: !todo.checked} : todo,\n      );\n      default:\n        return todos;\n  }\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);\n\n  //고윳값으로 사용될 id\n  //ref를 사용하여 변수 담기\n  const nextId = useRef(2501);\n\n  const onInsert = useCallback(\n    text => {\n      const todo = {\n        id: nextId.current,\n        text,\n        checked: false,\n      };\n      dispatch({type: 'INSERT', todo});\n      nextId.current += 1;  //nextId 1씩 더하기\n    },\n    [],\n  );\n\n  const onRemove = useCallback(\n    id => {\n      dispatch({type: 'REMOVE', id});\n    },\n    [],\n  );\n\n  const onToggle = useCallback(\n    id => {\n      dispatch({type: 'TOGGLE', id});\n    },\n    [],\n  );\n\n  return(\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert}/>\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle}/>\n    </TodoTemplate>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}